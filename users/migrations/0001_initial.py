# Generated by Django 5.2.3 on 2025-06-29 07:37

import django.contrib.auth.models
import django.core.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'Пользователь с таким email уже существует'},
                                            help_text='Укажите Ваш email', max_length=254, unique=True, validators=[
                        django.core.validators.EmailValidator(message='Введите корректный email')],
                                            verbose_name='Email')),
                ('display_name', models.CharField(help_text='Как мы будем к Вам обращаться', max_length=150,
                                                  verbose_name='Имя для отображения')),
                ('phone', models.CharField(blank=True, help_text='Введите номер телефона', max_length=35, null=True,
                                           validators=[django.core.validators.RegexValidator('^\\+?[0-9]{9,15}$',
                                                                                             message="Номер телефона должен быть в формате: '+999999999'")],
                                           verbose_name='Телефон')),
                ('avatar',
                 models.ImageField(blank=True, help_text='Загрузите свой аватар', null=True, upload_to='static/avatars',
                                   verbose_name='Аватар')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.',
                                                  related_name='custom_user_set', related_query_name='user',
                                                  to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='custom_user_set', related_query_name='user',
                                                            to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['email'],
                'permissions': [('can_inactivate', 'Может блокировать пользователя')],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
